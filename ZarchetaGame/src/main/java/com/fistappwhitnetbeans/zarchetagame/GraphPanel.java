/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.fistappwhitnetbeans.zarchetagame;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

/**
 *
 * @author ivail
 */
public class GraphPanel extends javax.swing.JPanel {

    private int width, hight;
    private int[] dataGause;
    private int[] dataDice;
    private double OneBarWidth;//shirinata na edin bar
    private double HightCoeff;//koeficenta za visochina
    private int offset = 20;

    public void setData(int[] g, int[] d) {
        if (g != null) {
            dataGause = g;
        }
        dataDice = d;
    }

    @Override
    public void setSize(int w, int h) {
        super.setSize(w, h);
        width = w;
        hight = h;
    }

    @Override
    public void setBounds(int x, int y, int w, int h) {
        super.setBounds(x, y, w, h);
        width = w;
        hight = h;
    }

    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON
        );

        width = this.getWidth();
        hight = this.getHeight();
        float maxColor = 1f;
        //all draw code
        if (dataGause != null) {
            OneBarWidth = (width - 2 * offset) / (double) dataGause.length;
            int max = dataGause[0];
            for (int i = 1; i < dataGause.length; i++) {
                if (max < dataGause[i]) {
                    max = dataGause[i];
                }
            }
            HightCoeff = (hight - 2 * offset) / (double) max;
            maxColor = 1 / (float) max;

            for (int i = 0; i < dataGause.length; i++) {
                g2d.drawRect(offset + (int) (i * OneBarWidth), (int) (hight - HightCoeff * dataGause[i] - 2 * offset), (int) OneBarWidth, (int) (HightCoeff * dataGause[i]));
                g2d.setColor(new Color(maxColor * dataGause[i], 0.0f, 0.0f, 1.0f));
                g2d.fillRect((offset + (int) (i * OneBarWidth)) + 1, (int) (hight - HightCoeff * dataGause[i] - 2 * offset) + 1, (int) OneBarWidth - 1, ((int) (HightCoeff * dataGause[i])) - 1);
                g2d.setColor(Color.BLACK);

            }

            max = dataDice[0];
            for (int i = 1; i < dataDice.length; i++) {
                if (max < dataDice[i]) {
                    max = dataDice[i];
                }
            }
            for (int i = 0; i < dataDice.length; i++) {
                System.out.println(dataDice[i]);
            }
            
            HightCoeff = (hight - 2 * offset) / (double) max;
            maxColor = 1 / (float) max;

            // Draw the lines
            int width = getWidth();
            int xScale = width / (dataDice.length - 1);

            // Draw the lines
            //y=(int) (hight - HightCoeff * dataGause[i] - 2 * offset)
            for (int i = 0; i < dataDice.length - 1; i++) {
                int x1 = (offset+(i * xScale))+10;
                int y1 = (int)(hight-HightCoeff*dataDice[i] -2* offset);
                g2d.drawOval(x1, y1, 4, 4);
                int x2 = (offset+((i + 1) * xScale))+10;
                int y2 = (int) (hight-HightCoeff*dataDice[i + 1] -2* offset);
                g2d.drawLine(x1, y1, x2, y2);
            }
            /*
            for (int i = 0; i < dataDice.length; i++) {
                int x1 = (offset + (int) (i * OneBarWidth));
                int y1 = (int) (hight - HightCoeff * dataDice[i] - 2 * offset);
                g2d.drawOval(x1, x1, 4, 4);

                if (i > 1) {
                    int y2 = ((int) (hight - HightCoeff * dataDice[i-1] - 2 * offset)) + ((int) OneBarWidth);
                    int x2 = (offset + (int) ((i-1) * OneBarWidth)) + ((int) (HightCoeff * dataDice[i]));
                    g2d.drawLine(x1, y1, x2, y2);
                }
            }
             */
        }

        g2d.drawLine(offset, offset, offset, hight - offset);
        g2d.drawLine(offset, hight - offset, width - offset, hight - offset);

    }

    public GraphPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
